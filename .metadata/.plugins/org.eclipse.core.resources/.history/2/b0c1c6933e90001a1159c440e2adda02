package proj;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class Principal {
	private static int deltaT = 1;
	
	private static int nombrePoissons;
	private List<Poisson> banc;
	
	private int nombreObstacles;
	private List<Obstacle> obstacles;
	
	private int nombrePredateurs;
	private List<ObstacleMobile> predateurs;
	
	
	public Principal(int n, int nombreObstacles, int nombrePredateurs) {
		this.nombrePoissons = n;
		this.nombreObstacles = nombreObstacles;
		this.nombrePredateurs = nombrePredateurs;
		
		this.obstacles = creerObstacles();
		this.predateurs = creerPredateurs();
		this.banc = creerBanc2();
	
		
	}
	
	
//Création de positions de départ pour les poissons	et les obstacles
	private List<Poisson> creerBanc2() {
		List<Poisson> P = new ArrayList<Poisson>();
		for( int i=0;i<nombrePoissons;i++) {
			int x = new Random().nextInt(750);
			int y = new Random().nextInt(750);
			double o = new Random().nextInt(360);
            Poisson p = new Poisson(x,y,o);
            P.add(p);
		}	
		return(P);	
	}

	private List<Obstacle> creerObstacles() {
		List<Obstacle> obstacles = new ArrayList<Obstacle>();
		for(int i = 0; i < this.nombreObstacles; i++) {
			int x = new Random().nextInt(600);
			int y = new Random().nextInt(600);
			int taille = new Random().nextInt(150);
			Obstacle o = new Obstacle(x , y , taille);
			obstacles.add(o);
		}
		return obstacles;
	}
	
	private List<ObstacleMobile> creerPredateurs() {
		List<ObstacleMobile> Predateurs= new ArrayList<ObstacleMobile>();
		for( int i=0;i<nombrePredateurs;i++) {
			int x = new Random().nextInt(750);
			int y = new Random().nextInt(750);
			double o = new Random().nextInt(360);
            ObstacleMobile requin = new ObstacleMobile(x,y,o);
            Predateurs.add(requin);
		}
		return(Predateurs);
	}

	
  /*private List<Obstacle> creerBarriere() {
		List<Obstacle> obstacles = new ArrayList<Obstacle>() ;
		for(int i = 0; i < 34; i++) { 
			Obstacle o = new Obstacle(i*20 ,0 , 40);
			Obstacle o34= new Obstacle(0, i*20 , 40);
			Obstacle o234= new Obstacle(34*20 ,i*20 , 40);
			Obstacle o334 = new Obstacle(i*20, (34*20)-20 , 40);
			
			obstacles.add(i,o);
			obstacles.add(i+34,o34);
			obstacles.add(i+(2*34),o234);
			obstacles.add(i+(3*34),o334);
		}
		Obstacle o136 = new Obstacle(34*20, (34*20)-20 , 40);
		obstacles.add(136,o136);
		return obstacles;
	}*/
	

// Modification des positions
	protected void avancerBanc(int t) {
		for( int i=0;i<nombrePoissons;i++) {
			this.banc.get(i).decision(obstacles, banc, predateurs);
			this.banc.get(i).avancer(t);
		}
	}
	
	protected void avancerPredateur(int t) {
		for( int i=0;i<nombrePredateurs;i++) {
			this.predateurs.get(i).decision(obstacles, banc);
			this.predateurs.get(i).avancer(t);
		}
	}


///////////////AJOUT///////////////////
	protected void evolutionBanc() {
		List<Poisson> poissonSurvivant = new ArrayList<Poisson>();
		for( Poisson i : banc) {
			if (i.etreMange(predateurs) == false) {

				poissonSurvivant.add(i);
			}
			else if (i.etreMange(predateurs) == true) {
				this.nombrePoissons-=1;
			}
		}
		this.banc = poissonSurvivant;
	}
	
///////////////FIN AJOUT///////////////////

	
// MAIN
	public static void main(String[] args) {
		Principal aquarium = new Principal(100,12, 2);
		Fenetre fenetre = new Fenetre(aquarium.banc,aquarium.obstacles,aquarium.predateurs);
		
		//Conditions Exceptions
		try {
	        Thread.sleep(100);
	      } catch (InterruptedException e) {
	    	e.printStackTrace();
	      }
		
		for (int i = 0;i<5000;i++) {
			aquarium.avancerPredateur(deltaT);
			aquarium.avancerBanc(deltaT);
			aquarium.evolutionBanc();
			
			fenetre.repaint();
			
			try {
		        Thread.sleep(100);
		      } catch (InterruptedException e) {
		        e.printStackTrace();
		      }
		
		}
	}

}

package proj;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;

public class Principal {
	
	private static int nombrePoissons;
	private int nombrePredateurs;
	private List<Sardine> banc;
	private List<Predateur> predateur;
	
	private int nombreObstacles;
	private List<Obstacle> obstacles;
	
	
	
	public Principal(int nombrePoissons, int nombreObstacles, int nombrePredateurs) {
		Principal.nombrePoissons = nombrePoissons;
		this.nombrePredateurs = nombrePredateurs;
		this.nombreObstacles = nombreObstacles;
		
		this.obstacles = creerObstacles();
		this.predateur = creerPredateur();
		this.banc = creerBanc();
	
		
	}
	
	
//Création de positions de départ pour les poissons	et les prédateurs
	private List<Sardine> creerBanc() {
		List<Sardine> P = new ArrayList<Sardine>();
		for( int i=0;i<nombrePoissons;i++) {
			int x = new Random().nextInt(750);
			int y = new Random().nextInt(750);
			double o = new Random().nextInt(360);
            Sardine p = new Sardine(x,y,o, 7,2);
            P.add(p);
		}
		return P;
	}
	private List<Predateur> creerPredateur() {
		List<Predateur> predateurs = new ArrayList<Predateur>();
		for( int i=0;i<nombrePredateurs;i++) {
    		int x = new Random().nextInt(750);
    		int y = new Random().nextInt(750);
    		double o = new Random().nextInt(360);
    		Predateur requin = new Predateur(x,y,o, 20, 5);
    		predateurs.add(requin) ;
		}	
		return(predateurs);	
	}
// Création des positions des obstacles immobiles
	private List<Obstacle> creerObstacles() {
		List<Obstacle> obstacles = new ArrayList<Obstacle>();
		for(int i = 0; i < this.nombreObstacles; i++) {
			int x = new Random().nextInt(600);
			int y = new Random().nextInt(600);
			int taille = new Random().nextInt(150);
			Obstacle o = new Obstacle(x , y , taille);
			obstacles.add(o);
		}
		return obstacles;
	}
	

// Modification des positions
	protected void avancerBanc() {
		for( int i=0;i<banc.size();i++) {
			this.banc.get(i).decision(obstacles, banc, predateur);
			this.banc.get(i).avancer();
		}
	}
	
	protected void avancerPredateur() {
		for( int i=0;i<predateur.size();i++) {
			this.predateur.get(i).decision(obstacles, banc, predateur);
			this.predateur.get(i).avancer();
		}
	}
	


/*	protected void evolutionBanc() {
		List<Sardine> poissonSurvivant = new ArrayList<Sardine>();
		for( Sardine i : banc) {	
			if (i.etreMange(predateur) == false) {   // On regarde si le poisson est mangé par un requin
				poissonSurvivant.add(i);
			}
			else if (i.etreMange(predateur) == true) {
				this.nombrePoissons-=1;
			}
		}
		this.banc = poissonSurvivant;
	}*/
	

	
// MAIN
	public static void main(String[] args) {
		Principal aquarium = new Principal(100,12, 2);
		Fenetre fenetre = new Fenetre(aquarium.banc,aquarium.obstacles, aquarium.predateur);
		
		//Conditions Exceptions
		try {
	        Thread.sleep(100);
	      } catch (InterruptedException e) {
	    	e.printStackTrace();
	      }
		
		for (int i = 0;i<5000;i++) {
			aquarium.avancerPredateur();
			aquarium.avancerBanc();
//			aquarium.evolutionBanc();
			
			fenetre.repaint();
			
			try {
		        Thread.sleep(100);
		      } catch (InterruptedException e) {
		        e.printStackTrace();
		      }
		
		}
	}

}
